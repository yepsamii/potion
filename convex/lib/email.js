// Email service for sending approval notifications
// This uses a generic approach that can work with various email providers

/**
 * Send repository approval request email
 * @param {string} adminEmail - Admin email to send to
 * @param {Object} requestData - Request details
 * @param {string} approvalUrl - URL for approval action
 * @param {string} rejectionUrl - URL for rejection action
 */
export async function sendRepositoryApprovalEmail(adminEmail, requestData, approvalUrl, rejectionUrl) {
  const { requesterName, requesterEmail, repoUrl, owner, repoName, justification } = requestData;
  
  // Email content
  const subject = `üîê Repository Access Request: ${owner}/${repoName}`;
  
  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>Repository Approval Request</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background-color: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; }
            .content { padding: 20px 0; }
            .repo-info { background-color: #e9ecef; padding: 15px; border-radius: 5px; margin: 15px 0; }
            .actions { text-align: center; margin: 30px 0; }
            .btn { display: inline-block; padding: 12px 25px; margin: 0 10px; text-decoration: none; border-radius: 5px; font-weight: bold; }
            .btn-approve { background-color: #28a745; color: white; }
            .btn-reject { background-color: #dc3545; color: white; }
            .footer { font-size: 12px; color: #666; border-top: 1px solid #eee; padding-top: 15px; margin-top: 30px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üîê Repository Access Request</h1>
                <p>A user is requesting to add a GitHub repository to Potion</p>
            </div>
            
            <div class="content">
                <h3>Request Details:</h3>
                <div class="repo-info">
                    <p><strong>Repository:</strong> <a href="${repoUrl}" target="_blank">${owner}/${repoName}</a></p>
                    <p><strong>Requested by:</strong> ${requesterName} (${requesterEmail})</p>
                    <p><strong>Repository URL:</strong> <a href="${repoUrl}" target="_blank">${repoUrl}</a></p>
                    ${justification ? `<p><strong>Justification:</strong> ${justification}</p>` : ''}
                </div>

                <h3>Security Verification:</h3>
                <ul>
                    <li>‚úÖ User identity verified</li>
                    <li>‚úÖ Repository access validated</li>
                    <li>‚úÖ Token scope permissions checked</li>
                    <li>‚è≥ Awaiting admin approval</li>
                </ul>

                <div class="actions">
                    <a href="${approvalUrl}" class="btn btn-approve">‚úÖ Approve Request</a>
                    <a href="${rejectionUrl}" class="btn btn-reject">‚ùå Reject Request</a>
                </div>

                <p><strong>Important:</strong> By approving this request, you're allowing the user to sync documents to this repository. Please verify:</p>
                <ul>
                    <li>The repository is appropriate for document syncing</li>
                    <li>The user should have access to this repository</li>
                    <li>The repository doesn't contain sensitive production code</li>
                </ul>
            </div>
            
            <div class="footer">
                <p>This approval request will expire in 48 hours.</p>
                <p>If you didn't expect this email or have security concerns, please ignore this request.</p>
                <p>Generated by Potion Document Management System</p>
            </div>
        </div>
    </body>
    </html>
  `;

  const textContent = `
Repository Access Request

A user is requesting to add a GitHub repository to Potion.

Request Details:
- Repository: ${owner}/${repoName}
- Requested by: ${requesterName} (${requesterEmail})
- Repository URL: ${repoUrl}
${justification ? `- Justification: ${justification}` : ''}

To approve this request, visit: ${approvalUrl}
To reject this request, visit: ${rejectionUrl}

This approval request will expire in 48 hours.

Generated by Potion Document Management System
  `;

  // Use the environment variable for email service
  const emailService = process.env.EMAIL_SERVICE || 'console'; // Default to console for development
  
  console.log(`üìß Sending repository approval email to ${adminEmail}`);
  console.log(`üìß Subject: ${subject}`);
  
  switch (emailService) {
    case 'resend':
      return await sendViaResend(adminEmail, subject, htmlContent, textContent);
    case 'sendgrid':
      return await sendViaSendGrid(adminEmail, subject, htmlContent, textContent);
    case 'smtp':
      return await sendViaSMTP(adminEmail, subject, htmlContent, textContent);
    case 'console':
    default:
      // For development - log to console
      console.log('=== EMAIL CONTENT ===');
      console.log(`To: ${adminEmail}`);
      console.log(`Subject: ${subject}`);
      console.log(`Approval URL: ${approvalUrl}`);
      console.log(`Rejection URL: ${rejectionUrl}`);
      console.log(textContent);
      console.log('====================');
      return { success: true, provider: 'console' };
  }
}

/**
 * Send email via Resend (recommended for production)
 */
async function sendViaResend(to, subject, html, text) {
  const apiKey = process.env.RESEND_API_KEY;
  if (!apiKey) {
    throw new Error('RESEND_API_KEY environment variable is required');
  }

  const response = await fetch('https://api.resend.com/emails', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      from: process.env.FROM_EMAIL || 'noreply@potion-docs.com',
      to: [to],
      subject,
      html,
      text,
    }),
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`Resend API error: ${response.status} ${error}`);
  }

  const result = await response.json();
  console.log(`‚úÖ Email sent via Resend:`, result.id);
  return { success: true, provider: 'resend', id: result.id };
}

/**
 * Send email via SendGrid
 */
async function sendViaSendGrid(to, subject, html, text) {
  const apiKey = process.env.SENDGRID_API_KEY;
  if (!apiKey) {
    throw new Error('SENDGRID_API_KEY environment variable is required');
  }

  const response = await fetch('https://api.sendgrid.com/v3/mail/send', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      personalizations: [{ to: [{ email: to }] }],
      from: { email: process.env.FROM_EMAIL || 'noreply@potion-docs.com' },
      subject,
      content: [
        { type: 'text/html', value: html },
        { type: 'text/plain', value: text },
      ],
    }),
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`SendGrid API error: ${response.status} ${error}`);
  }

  console.log(`‚úÖ Email sent via SendGrid`);
  return { success: true, provider: 'sendgrid' };
}

/**
 * Send email via SMTP (using nodemailer-like approach)
 * Note: This is a placeholder - actual SMTP implementation would need a proper SMTP client
 */
async function sendViaSMTP(to, subject, html, text) {
  // This would require a proper SMTP client library
  // For now, just log the intention
  console.log(`üìß SMTP email would be sent to: ${to}`);
  console.log(`üìß Subject: ${subject}`);
  
  // In a real implementation, you'd use nodemailer or similar
  return { success: true, provider: 'smtp', note: 'SMTP not fully implemented' };
}

/**
 * Generate a secure random token for approval URLs
 */
export function generateApprovalToken() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < 32; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}